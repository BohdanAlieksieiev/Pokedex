{"version":3,"sources":["components/UI/PaginationComponent.js","api/api.js","services/Pokemons.js","services/actions/pokemons.js","components/pokemon/PokemonCardLoading.js","components/UI/Loading.js","components/pokemon/PokemonCard.js","components/pokemon/Filter.js","components/pokemon/PokemonDoesNotExist.js","common/helpers/PageHelper.js","pages/Index/IndexPage.js","components/pokemon/PokemonImageCarousel.js","components/pokemon/PokemonStats.js","components/Modal/ModalAbilities.js","components/Modal/ModalForms.js","components/Modal/ModalHeldItems.js","components/Modal/ModalType.js","components/Modal/ModalLocation.js","components/Modal/ModalMoves.js","components/pokemon/MainInfo.js","pages/Pokemon/Pokemon.js","common/images/randomPokemon.png","components/layout/HeaderApp.js","pages/Pokemon/History.js","pages/resultPage/NotFound.js","router/router.js","store/Store.js","App.js","reportWebVitals.js","index.js"],"names":["PaginationComponent","state","changeSize","onChangePaginationSize","current","limit","event","a","setState","props","setPaginationLimit","onChangePagination","setPaginationCurrent","this","pagination","page","itemsCount","justify","className","defaultCurrent","total","onChange","defaultPageSize","onShowSizeChange","Component","axios","create","baseURL","getPokemons","data","API","get","offset","request","getPokemonById","id","getPokemonByName","name","getAllPokemons","getPokemon","getTypes","getPokemonByType","idType","getLocationsArea","getAbilitie","getForm","getMove","getHeldItem","getType","getLocation","setFavorite","type","favorite","setCountPokemon","count","addToHistory","pokemon","removeFavoritePokemon","dispatch","pokemons","then","res","catch","err","Meta","Card","PokemonCardLoading","loading","checked","style","width","marginTop","avatar","src","title","description","Loading","tip","size","decoratedComponent","connect","setFavoritePokemon","connectDecorator","styleWidth","imageWidth","sprites","timeOut","setImage","setTimeout","existImage","other","dream_world","front_default","front_shiny","goToPageInPokemon","history","push","addToFavorite","localStorage","getItem","pokemonAction","StarTwoTone","twoToneColor","onClick","StarOutlined","CheckOutlined","cover","height","alt","actions","charAt","toUpperCase","slice","Option","Select","formRef","React","createRef","visible","placement","affixOffsetTop","loadingTags","tags","results","showDrawer","onClose","loadingFinished","onReset","resetFields","onChangeForm","resetFilter","setPokemonFilter","getFieldValue","offsetTop","FilterOutlined","closable","ref","layout","Item","label","placeholder","mode","map","value","index","url","htmlType","PokemonDoesNotExist","FrownTwoTone","getItemInPage","parseInt","filterByName","filter","includes","toLowerCase","filterByFewTags","staticAllPokemons","namePokemon","urlPokemon","length","tagsUrlArr","split","forEach","item","clearNamePokemon","Set","clearUrlPokemon","result","element","setCountPokemonInStore","allPokemons","getPokemonsInPage","PageHelper","newLimit","newPath","newCurrent","getQuery","nameQuery","search","location","URLSearchParams","setAllPokemons","dataFilter","gutter","marginLeft","marginRight","PokemonImageCarousel","spritesArr","autoplay","dots","labels","datasets","fill","backgroundColor","borderColor","pointBackgroundColor","pointBorderColor","pointHoverBackgroundColor","pointHoverBorderColor","setPokemonFromProps","getArrStat","datasets2","arrStat","stats","base_stat","isModalVisible","info","getInfo","abilityModal","handleOk","showAbilityModal","handleCancel","normalizeText","text","replaceAll","openPokemon","window","href","onOk","onCancel","TextArea","defaultValue","effect_entries","effect","disabled","autoSize","minRows","maxRows","formModal","console","log","showFormModal","labelCol","span","form_name","is_battle_only","is_default","order","heldItemModal","showHeldItemsModal","flavor_text_entries","attributes","category","cost","fling_power","held_by_pokemon","typeModal","showTypeModal","move_damage_class","moves","locationModal","showLocationModal","game_index","pokemon_encounters","movesModal","showMovesModal","contest_type","damage_class","generation","target","priority","params","webSite","locations","dataList","getMainInfo","Object","keys","pokemonInfo","newDataList","key","startGetLocationArea","findE","find","e","getLocationArea","urlLocation","urlId","openWiki","open","orientation","footer","GitlabOutlined","bordered","dataSource","renderItem","TrophyOutlined","ColumnHeightOutlined","ColumnWidthOutlined","NumberOutlined","move","TableOutlined","abilityItem","ability","ThunderboltOutlined","heldItems","ShoppingOutlined","formItem","ApartmentOutlined","typesItem","TagsOutlined","locationsItem","location_area","FlagOutlined","addPokemonToHistory","match","getAllImage","spriteUrl","newPokemon","Header","Layout","removeFavorite","redirectOnFavorite","randomPokemon","randomId","Math","floor","random","to","redirectOnMain","DeleteTwoTone","HistoryOutlined","historyPokemon","getPokemonFromHistory","arrPokemons","newObjPokemon","marginBottom","NotFound","status","subTitle","extra","Content","RouterJS","path","component","IndexPage","Pokemon","History","initialState","JSON","parse","composeEnhancers","REDUX_DEVTOOLS_EXTENSION_COMPOSE","compose","store","createStore","action","setItem","removeItem","allHistoryPokemon","pokemonNow","stringify","newArrHistory","applyMiddleware","thunkMiddleware","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e302c246.chunk.js","sourcesContent":["import { Pagination, Row, Col } from 'antd';\r\nimport React, {Component} from \"react\";\r\n\r\n\r\nexport default class PaginationComponent extends Component {\r\n\r\n    state = {\r\n        changeSize: false\r\n    }\r\n\r\n    onChangePaginationSize = async (current, limit, event) => {\r\n        await this.setState({ changeSize: true })\r\n        this.props.setPaginationLimit(limit)\r\n    }\r\n\r\n    onChangePagination = (current) => {\r\n        if(!this.state.changeSize){\r\n            this.props.setPaginationCurrent(current)\r\n        }else{\r\n            this.setState({ changeSize: false })\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n        const { page, limit } = this.props.pagination\r\n        const { itemsCount } = this.props\r\n        return (\r\n            <>\r\n                <Row justify=\"center\" className=\"pagination-margin\">\r\n                    <Col>\r\n                        <Pagination\r\n                        defaultCurrent={page}\r\n                        total={itemsCount}\r\n                        onChange={this.onChangePagination}\r\n                        defaultPageSize={limit}\r\n                        onShowSizeChange={this.onChangePaginationSize}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n            </>\r\n        )\r\n    }\r\n}","import axios from 'axios';\r\n\r\nexport default axios.create({\r\n    baseURL: `https://pokeapi.co/api/v2/`\r\n});","import API from '../api/api'\r\n\r\nexport const getPokemons = async (data) => {\r\n    const request = await API.get('/pokemon?limit=' + data.limit + '&offset=' + data.offset, null)\r\n    return request.data\r\n}\r\n\r\nexport const getPokemonById = async (id) => {\r\n    const request = await API.get('/pokemon/' + id, null)\r\n    return request.data\r\n}\r\n\r\nexport const getPokemonByName = async (name) => {\r\n    const request = await API.get('/pokemon/' + name, null)\r\n    return request.data\r\n}\r\n\r\nexport const getAllPokemons = async () => {\r\n    const request = await API.get('/pokemon?limit=5000&offset=0', null)\r\n    return request.data\r\n}\r\n\r\nexport const getPokemon = async (name) => {\r\n    const request = await API.get('/pokemon/' + name)\r\n    return request.data\r\n}\r\n\r\nexport const getTypes = async () => {\r\n    const request = await API.get('/type')\r\n    return request.data\r\n}\r\n\r\nexport const getRegions = async () => {\r\n    const request = await API.get('/region')\r\n    return request.data\r\n}\r\n\r\nexport const getPokemonByType = async (idType) => {\r\n    const request = await API.get('/type/' + idType)\r\n    return request.data\r\n}\r\n\r\nexport const getLocationsArea = async (id) => {\r\n    const request = await API.get('/pokemon/' + id + '/encounters')\r\n    return request.data\r\n}\r\n\r\nexport const getAbilitie = async (name) => {\r\n    const request = await API.get('/ability/' + name)\r\n    return request.data\r\n}\r\n\r\nexport const getForm = async (name) => {\r\n    const request = await API.get('/pokemon-form/' + name)\r\n    return request.data\r\n}\r\n\r\nexport const getMove = async (name) => {\r\n    const request = await API.get('/move/' + name)\r\n    return request.data\r\n}\r\n\r\nexport const getHeldItem = async (name) => {\r\n    const request = await API.get('/item/' + name)\r\n    return request.data\r\n}\r\n\r\nexport const getType = async (name) => {\r\n    const request = await API.get('/type/' + name)\r\n    return request.data\r\n}\r\n\r\nexport const getLocation = async (name) => {\r\n    const request = await API.get('/location-area/' + name)\r\n    return request.data\r\n}\r\n","import * as pokemons from \"../Pokemons\";\r\n\r\nexport function setFavorite(name) {\r\n    return {\r\n        type: 'SET_FAVORITE',\r\n        favorite: name,\r\n    };\r\n}\r\n\r\nexport function setCountPokemon(count) {\r\n    return {\r\n        type: 'SET_COUNT_POKEMON',\r\n        count: count,\r\n    };\r\n}\r\n\r\nexport function removeFavorite() {\r\n    return {\r\n        type: 'REMOVE_FAVORITE',\r\n        favorite: null,\r\n    };\r\n}\r\n\r\nexport function addToHistory(pokemon) {\r\n    return {\r\n        type: 'ADD_POKEMON_TO_HISTORY',\r\n        pokemon: pokemon,\r\n    };\r\n}\r\n\r\nexport function setFavoritePokemon(name) {\r\n    return async (dispatch) => {\r\n        dispatch(setFavorite(name))\r\n        return true\r\n    }\r\n}\r\n\r\nexport function removeFavoritePokemon() {\r\n    return async (dispatch) => {\r\n        dispatch(removeFavorite())\r\n        return true\r\n    }\r\n}\r\n\r\nexport function setCountPokemonInStore(count) {\r\n    return async (dispatch) => {\r\n        dispatch(setCountPokemon(count))\r\n        return true\r\n    }\r\n}\r\n\r\n\r\nexport function addPokemonToHistory(pokemon) {\r\n    return async (dispatch) => {\r\n        dispatch(addToHistory(pokemon))\r\n        return true\r\n    }\r\n}\r\n\r\n\r\n\r\nexport function getPokemons(pagination) {\r\n    return async () => {\r\n        const data = {\r\n            limit: pagination.limit,\r\n            offset: pagination.page\r\n        }\r\n        let res = await pokemons.getPokemons(data).then(res => {\r\n            return res\r\n        }).catch(err => {\r\n            return err\r\n        })\r\n        return res\r\n    }\r\n}\r\n\r\nexport function getPokemonById(id) {\r\n    return async () => {\r\n        let res = await pokemons.getPokemonById(id).then(res => {\r\n            return res\r\n        }).catch(err => {\r\n            return err\r\n        })\r\n        return res\r\n    }\r\n}\r\n\r\nexport function getPokemonByName(name) {\r\n    return async () => {\r\n        let res = await pokemons.getPokemonByName(name).then(res => {\r\n            return res\r\n        }).catch(err => {\r\n            return err\r\n        })\r\n        return res\r\n    }\r\n}\r\n\r\nexport function getLocationsArea(id) {\r\n    return async () => {\r\n        let res = await pokemons.getLocationsArea(id).then(res => {\r\n            return res\r\n        }).catch(err => {\r\n            return err\r\n        })\r\n        return res\r\n    }\r\n}\r\n\r\nexport function getForm(name) {\r\n    return async () => {\r\n        let res = await pokemons.getForm(name).then(res => {\r\n            return res\r\n        }).catch(err => {\r\n            return err\r\n        })\r\n        return res\r\n    }\r\n}\r\n\r\nexport function getMove(name) {\r\n    return async () => {\r\n        let res = await pokemons.getMove(name).then(res => {\r\n            return res\r\n        }).catch(err => {\r\n            return err\r\n        })\r\n        return res\r\n    }\r\n}\r\n\r\nexport function getHeldItem(name) {\r\n    return async () => {\r\n        let res = await pokemons.getHeldItem(name).then(res => {\r\n            return res\r\n        }).catch(err => {\r\n            return err\r\n        })\r\n        return res\r\n    }\r\n}\r\n\r\nexport function getType(name) {\r\n    return async () => {\r\n        let res = await pokemons.getType(name).then(res => {\r\n            return res\r\n        }).catch(err => {\r\n            return err\r\n        })\r\n        return res\r\n    }\r\n}\r\n\r\nexport function getLocation(name) {\r\n    return async () => {\r\n        let res = await pokemons.getLocation(name).then(res => {\r\n            return res\r\n        }).catch(err => {\r\n            return err\r\n        })\r\n        return res\r\n    }\r\n}\r\n\r\nexport function getAbilitie(name) {\r\n    return async () => {\r\n        let res = await pokemons.getAbilitie(name).then(res => {\r\n            return res\r\n        }).catch(err => {\r\n            return err\r\n        })\r\n        return res\r\n    }\r\n}\r\n\r\nexport function getAllPokemons() {\r\n    return async () => {\r\n        let res = await pokemons.getAllPokemons().then(res => {\r\n            return res\r\n        }).catch(err => {\r\n            return err\r\n        })\r\n        return res\r\n    }\r\n}\r\n\r\nexport function getPokemon(name) {\r\n    return async () => {\r\n        let res = await pokemons.getPokemon(name).then(res => {\r\n            return res\r\n        }).catch(err => {\r\n            return err\r\n        })\r\n        return res\r\n    }\r\n}\r\n\r\nexport function getTypes() {\r\n    return async () => {\r\n        let res = await pokemons.getTypes().then(res => {\r\n            return res\r\n        }).catch(err => {\r\n            return err\r\n        })\r\n        return res\r\n    }\r\n}\r\n\r\nexport function getRegions() {\r\n    return async () => {\r\n        let res = await pokemons.getRegions().then(res => {\r\n            return res\r\n        }).catch(err => {\r\n            return err\r\n        })\r\n        return res\r\n    }\r\n}","import React, {Component} from 'react';\r\nimport { Card, Avatar } from 'antd';\r\n\r\nconst { Meta } = Card;\r\n\r\nexport default class PokemonCardLoading extends Component {\r\n    state = {\r\n        loading: true,\r\n    };\r\n\r\n    onChange = checked => {\r\n        this.setState({ loading: !checked });\r\n    };\r\n\r\n    render() {\r\n        const { loading } = this.state;\r\n\r\n        return (\r\n            <>\r\n                {/*<Switch checked={!loading} onChange={this.onChange} />*/}\r\n\r\n                <Card style={{ width: 300, marginTop: 16 }} loading={loading}>\r\n                    <Meta\r\n                        avatar={\r\n                            <Avatar src=\"https://zos.alipayobjects.com/rmsportal/ODTLcjxAfvqbxHnVXCYX.png\" />\r\n                        }\r\n                        title=\"Card title\"\r\n                        description=\"This is the description\"\r\n                    />\r\n                </Card>\r\n            </>\r\n        );\r\n    }\r\n}","import React, {Component} from 'react';\r\nimport { Spin } from 'antd';\r\n\r\nexport default class Loading extends Component{\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <div className=\"center-on-the-page\">\r\n                    <Spin\r\n                        tip=\"Loading...\"\r\n                        size=\"large\"/>\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n}\r\n","import React, {Component} from 'react';\r\n\r\nimport { Card, Image } from 'antd';\r\nimport { CheckOutlined, StarOutlined, StarTwoTone } from '@ant-design/icons';\r\nimport {getPokemon, removeFavoritePokemon, setFavoritePokemon} from \"../../services/actions/pokemons\";\r\nimport PokemonCardLoading from \"./PokemonCardLoading\";\r\n\r\nimport { connect } from 'react-redux';\r\nimport Loading from \"../UI/Loading\";\r\n\r\nconst { Meta } = Card;\r\nconst connectDecorator = connect(\r\n    (state) => ({\r\n        favorite: state.favorite,\r\n    }),\r\n    { getPokemon, setFavoritePokemon, removeFavoritePokemon }\r\n);\r\n\r\nclass PokemonCard extends Component{\r\n    state = {\r\n        pokemon: null,\r\n        styleWidth: 300,\r\n        imageWidth: 300,\r\n        loading: true,\r\n        sprites: null,\r\n\r\n        timeOut: 1000,\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getPokemon()\r\n    }\r\n\r\n    getPokemon = async () => {\r\n        const { timeOut } = this.state\r\n        const { pokemon: {name} } = this.props\r\n\r\n        const res = await this.props.getPokemon(name)\r\n        if(res){\r\n            await this.setState({ pokemon: res })\r\n            await this.setImage()\r\n            this.setState({ loading: false })\r\n        }else{\r\n            setTimeout(() => {\r\n                this.getPokemon()\r\n            }, timeOut)\r\n        }\r\n    }\r\n\r\n    setImage = () => {\r\n        const { pokemon } = this.state\r\n        if(pokemon) {\r\n            const { sprites } = pokemon\r\n            let existImage = null\r\n            if(sprites.other.dream_world.front_default) existImage = sprites.other.dream_world.front_default\r\n            else if(sprites.front_default) existImage = sprites.front_default\r\n            else if(sprites.front_shiny) existImage = sprites.front_shiny\r\n            else existImage = \"https://memegenerator.net/img/instances/11208557.jpg\"\r\n\r\n            this.setState({ sprites: existImage })\r\n        }\r\n    }\r\n\r\n    goToPageInPokemon = () => {\r\n        const { pokemon, history } = this.props\r\n        history.push('/Pokedex/pokemon/' + pokemon.name)\r\n    }\r\n\r\n    addToFavorite = () => {\r\n        const { pokemon: {name}, setFavoritePokemon, removeFavoritePokemon } = this.props\r\n        if(localStorage.getItem('favorite') === name) {\r\n            removeFavoritePokemon(name)\r\n        }else{\r\n            //console.log({\"setFavoritePokemon\": name});\r\n            setFavoritePokemon(name)\r\n        }\r\n    }\r\n\r\n    render(){\r\n        const { loading, pokemon, styleWidth, imageWidth, sprites } = this.state\r\n        const { pokemon: {name} } = this.props\r\n        const favorite = this.props.favorite\r\n        let pokemonAction = []\r\n        if(favorite === name) {\r\n            pokemonAction.push(<StarTwoTone twoToneColor=\"#52c41a\" key=\"favorite\" onClick={this.addToFavorite}/>)\r\n        }else{\r\n            pokemonAction.push(<StarOutlined key=\"favorite\" onClick={this.addToFavorite}/>)\r\n        }\r\n        pokemonAction.push(<CheckOutlined key=\"accept\" onClick={this.goToPageInPokemon}/>)\r\n\r\n        return (\r\n\r\n            <>\r\n                {\r\n                    loading && (\r\n                        <PokemonCardLoading/>\r\n                    )\r\n                }\r\n                {\r\n                    !loading && (\r\n                        <Card\r\n                            loading={loading}\r\n                            style={{ width: styleWidth}}\r\n                            cover={\r\n                                <>\r\n                                    {\r\n                                        loading && (\r\n                                            <Loading/>\r\n                                        )\r\n                                    }\r\n                                    {\r\n                                        !loading && (\r\n                                            <Image\r\n                                                height={imageWidth}\r\n                                                alt=\"example\"\r\n                                                src={sprites}\r\n                                            />\r\n                                        )\r\n                                    }\r\n                                </>\r\n                            }\r\n                            actions={pokemonAction}\r\n                        >\r\n                            {\r\n                                !loading && (\r\n                                    <Meta\r\n                                        title={pokemon.name.charAt(0).toUpperCase() + pokemon.name.slice(1)}\r\n                                        // description={'Base experience: ' + pokemon.base_experience}\r\n                                    />\r\n                                )\r\n                            }\r\n\r\n                        </Card>\r\n                    )\r\n                }\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nconst decoratedComponent = connectDecorator(PokemonCard)\r\nexport {decoratedComponent as PokemonCard};","import React, {Component} from 'react';\r\nimport { Drawer, Button, Affix, Form, Input, Select } from 'antd';\r\nimport { FilterOutlined } from '@ant-design/icons';\r\nimport Loading from \"../UI/Loading\";\r\nimport {connect} from \"react-redux\";\r\nimport {getTypes} from \"../../services/actions/pokemons\";\r\nconst { Option } = Select;\r\n\r\n// import { Types } from \"./Types\";\r\n// import {Regions} from \"./Regions\";\r\n// import BaseExperience from \"./BaseExperience\";\r\n\r\nconst connectDecorator = connect(\r\n    null,\r\n    { getTypes }\r\n);\r\n\r\nclass FilterPokemon extends Component{\r\n    formRef = React.createRef();\r\n    state = {\r\n        visible: false,\r\n        placement: 'left',\r\n        affixOffsetTop: 80,\r\n\r\n        loadingTags: true,\r\n        tags: null\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.loadingTags()\r\n    }\r\n\r\n    loadingTags = async () => {\r\n        const res = await this.props.getTypes()\r\n        this.setState({ tags: res.results })\r\n        this.setState({ loadingTags: false })\r\n    }\r\n\r\n    showDrawer = () => {\r\n        this.setState({\r\n            visible: true,\r\n        });\r\n    };\r\n\r\n    onClose = () => {\r\n        this.setState({\r\n            visible: false,\r\n        });\r\n    };\r\n\r\n    loadingFinished = () => {\r\n        this.setState({ loadingTags: false })\r\n    }\r\n\r\n    onReset = () => {\r\n        this.formRef.current.resetFields();\r\n        this.onChangeForm()\r\n        this.props.resetFilter()\r\n    };\r\n\r\n    onChangeForm = () => {\r\n        this.props.setPokemonFilter(this.formRef.current.getFieldValue())\r\n    }\r\n\r\n    render(){\r\n        const { placement, visible, affixOffsetTop, loadingTags, tags } = this.state;\r\n        return (\r\n            <>\r\n                <Affix offsetTop={affixOffsetTop}>\r\n                    <Button type=\"primary\" onClick={this.showDrawer}>\r\n                        <FilterOutlined />\r\n                    </Button>\r\n                </Affix>\r\n\r\n\r\n                <Drawer\r\n                    title=\"Filter pokemons\"\r\n                    placement={placement}\r\n                    closable={false}\r\n                    onClose={this.onClose}\r\n                    visible={visible}\r\n                    key={placement}\r\n                >\r\n                    <Form\r\n                        ref={this.formRef}\r\n                        layout=\"vertical\"\r\n                        name=\"userForm\"\r\n                        onChange={this.onChangeForm}\r\n                    >\r\n                        <Form.Item name=\"name\" label=\"Name\">\r\n                            <Input />\r\n                        </Form.Item>\r\n                        {\r\n                            loadingTags && (\r\n                                <Loading />\r\n                            )\r\n                        }\r\n                        {\r\n                            !loadingTags && (\r\n                                <Form.Item name=\"tags\" label=\"Tags\">\r\n                                    <Select placeholder=\"select tag\" mode=\"multiple\" onChange={this.onChangeForm}>\r\n                                        {\r\n                                            tags.map((value, index)=> {\r\n                                                return <Option value={value.url} key={index}>{value.name.charAt(0).toUpperCase() + value.name.slice(1)}</Option>\r\n                                            })\r\n                                        }\r\n                                    </Select>\r\n                                </Form.Item>\r\n                            )\r\n                        }\r\n\r\n                        <Button htmlType=\"button\" onClick={this.onReset}>\r\n                            Reset\r\n                        </Button>\r\n                    </Form>\r\n\r\n\r\n                    {/*Function is not implemented*/}\r\n                    {/*<Types/>*/}\r\n                    {/*<Regions*/}\r\n                    {/*    loadingFinished={this.loadingFinished}/>*/}\r\n                    {/*<BaseExperience/>*/}\r\n                    {\r\n                        loadingTags && (\r\n                            <Loading />\r\n                        )\r\n                    }\r\n                </Drawer>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nconst decoratedComponent = connectDecorator( FilterPokemon )\r\nexport { decoratedComponent as FilterPokemon };","import React, {Component} from 'react';\r\nimport { FrownTwoTone } from '@ant-design/icons';\r\n\r\nexport default class PokemonDoesNotExist extends Component{\r\n    render() {\r\n        return (\r\n            <>\r\n                <h2 className=\"flex-center\">\r\n                    <span>Pokemon does not exist</span>\r\n                    <FrownTwoTone twoToneColor=\"#eb2f96\" className=\"margin-left-not-exist\" />\r\n                </h2>\r\n            </>\r\n        )\r\n    }\r\n}\r\n","import { getPokemonByType } from \"../../services/Pokemons\"\r\n\r\nexport const getItemInPage = (pokemons, size, offset) => { // For page\r\n    return pokemons.slice(parseInt(offset), parseInt(size) + parseInt(offset))\r\n}\r\n\r\nexport const filterByName = (pokemons, name) => { /// For all\r\n    return pokemons.filter(pokemon => pokemon.name.includes(name.toLowerCase()))\r\n}\r\n\r\nexport const filterByFewTags = async (staticAllPokemons, tags) => {\r\n    /// Тута починається yobka\r\n    let namePokemon = []\r\n    let urlPokemon = []\r\n    for(let index = 0; index < tags.length; index++) {\r\n        const tagsUrlArr = tags[index].split('/')\r\n        const resTypePokemons = await getPokemonByType(tagsUrlArr[tagsUrlArr.length - 2])\r\n        resTypePokemons.pokemon.forEach(( item ) => {\r\n            namePokemon.push(item.pokemon.name)\r\n            urlPokemon.push(item.pokemon.url)\r\n        })\r\n    }\r\n    const clearNamePokemon = [...new Set(namePokemon)]\r\n    const clearUrlPokemon = [...new Set(urlPokemon)]\r\n    const result = clearNamePokemon.map(( element, index ) => {\r\n        return {\r\n            name: element,\r\n            url: clearUrlPokemon[index]\r\n        }\r\n    })\r\n\r\n    return result\r\n}","import React, {Component} from 'react';\r\nimport { Row, Col  } from 'antd';\r\n\r\nimport PaginationComponent from \"../../components/UI/PaginationComponent\";\r\nimport { PokemonCard } from \"../../components/pokemon/PokemonCard\";\r\nimport Loading from \"../../components/UI/Loading\";\r\nimport { getPokemons, getAllPokemons, setCountPokemonInStore } from \"../../services/actions/pokemons\";\r\nimport { connect } from 'react-redux';\r\nimport { FilterPokemon } from \"../../components/pokemon/Filter\";\r\nimport PokemonDoesNotExist from \"../../components/pokemon/PokemonDoesNotExist\";\r\nimport * as PageHelper from \"../../common/helpers/PageHelper\"\r\n\r\n\r\nconst connectDecorator = connect(\r\n    null,\r\n    { getPokemons, getAllPokemons, setCountPokemonInStore }\r\n);\r\n\r\nclass IndexPage extends Component{\r\n    state = {\r\n        loading: true,\r\n        pokemons: null,\r\n        allPokemons: null,\r\n        staticAllPokemons: null,\r\n        itemsCount: 0,\r\n\r\n        pagination: {\r\n            page: 0,\r\n            limit: 20,\r\n        }\r\n    }\r\n\r\n    async componentDidMount() {\r\n        this.setState({\r\n            pagination: {\r\n                page: await this.getQuery('page') ? await this.getQuery('page') : 0,\r\n                limit: await this.getQuery('limit') ? await this.getQuery('limit') : 20\r\n            }\r\n        })\r\n        await this.getAllPokemons()\r\n        await this.getPokemonsInPage()\r\n    }\r\n\r\n\r\n    getAllPokemons = async () => {\r\n        if(!this.state.allPokemons){\r\n            const res = await this.props.getAllPokemons()\r\n            this.setState({ allPokemons: res.results })\r\n            this.setState({ staticAllPokemons: res.results })\r\n            this.setState({ itemsCount: this.state.allPokemons.length })\r\n        }\r\n        await this.props.setCountPokemonInStore(this.state.staticAllPokemons.length)\r\n    }\r\n\r\n    getPokemonsInPage = async () => {\r\n        this.setState({ loading: true })\r\n        await this.setState({\r\n            pokemons: PageHelper.getItemInPage(this.state.allPokemons, this.state.pagination.limit, this.state.pagination.page)\r\n        })\r\n\r\n        this.setState({ loading: false })\r\n    }\r\n\r\n    setPaginationLimit = (newLimit) => {\r\n        const { page } = this.state.pagination\r\n        let newPath = '/Pokedex/?page=' + page + '&limit=' + newLimit\r\n        this.setState({ pagination: {\r\n                ...this.state.pagination,\r\n                limit: newLimit\r\n        }})\r\n        this.props.history.push(newPath)\r\n        this.getPokemonsInPage()\r\n    }\r\n\r\n    setPaginationCurrent = (newCurrent) => {\r\n        const { limit } = this.state.pagination\r\n        let newPath = '/Pokedex/?page=' + newCurrent\r\n        newPath += (limit) ? ('&limit=' + limit) : ''\r\n        this.setState({ pagination: {\r\n                ...this.state.pagination,\r\n                page: newCurrent,\r\n        }})\r\n        this.props.history.push(newPath)\r\n\r\n        this.getPokemonsInPage()\r\n    }\r\n\r\n    getQuery = (nameQuery) => {\r\n        const search = this.props.location.search;\r\n        return new URLSearchParams(search).get(nameQuery);\r\n    }\r\n\r\n    resetFilter = () => {\r\n        const { staticAllPokemons } = this.state\r\n        this.setState({ allPokemons: staticAllPokemons })\r\n        this.setPaginationCurrent(1)\r\n    }\r\n\r\n    setAllPokemons = ( pokemons ) => {\r\n        this.setState({ allPokemons: pokemons })\r\n        this.setState({ itemsCount: pokemons.length })\r\n        this.getPokemonsInPage()\r\n    }\r\n\r\n    setPokemonFilter = async (dataFilter) => {\r\n        const { staticAllPokemons } = this.state\r\n        this.setPaginationCurrent(1)\r\n        if(dataFilter.tags) { /// Спочатку по тегах\r\n            if(dataFilter.tags.length > 0) {\r\n                const filterByFewTags = await PageHelper.filterByFewTags(staticAllPokemons, dataFilter.tags)\r\n                this.setAllPokemons(filterByFewTags)\r\n            }else{\r\n                await this.setAllPokemons(this.state.staticAllPokemons)\r\n            }\r\n        }else{\r\n            await this.setAllPokemons(this.state.staticAllPokemons)\r\n        }\r\n\r\n        if(dataFilter.name){\r\n            const filterByName = await PageHelper.filterByName(this.state.allPokemons, dataFilter.name)\r\n            this.setAllPokemons(filterByName)\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { loading, pagination, pokemons, itemsCount } = this.state\r\n        return (\r\n            <>\r\n                <FilterPokemon\r\n                    setPokemonFilter={this.setPokemonFilter}\r\n                    resetFilter={this.resetFilter}\r\n                />\r\n\r\n                {\r\n                    loading && ( <Loading/> )\r\n                }\r\n\r\n\r\n                {\r\n                    !loading && (\r\n                        <>\r\n                            {\r\n                                pokemons.length <= 0 && (\r\n                                    <>\r\n                                        <PokemonDoesNotExist/>\r\n                                    </>\r\n                                )\r\n                            }\r\n\r\n                            <Row\r\n                                justify=\"space-around\"\r\n                                gutter={[8, 40]}\r\n                                style={{ marginLeft: 0, marginRight: 0 }}\r\n\r\n                            >\r\n                                {\r\n                                    pokemons.map(( pokemon, index ) => {\r\n                                        return (\r\n                                            <Col key={index}>\r\n                                                <PokemonCard\r\n                                                    pokemon={pokemon}\r\n                                                    history={this.props.history}\r\n                                                />\r\n                                            </Col>\r\n                                        )\r\n                                    })\r\n                                }\r\n                            </Row>\r\n\r\n                            {\r\n                                pokemons.length > 0 && (\r\n                                    <>\r\n                                        <PaginationComponent\r\n                                            pagination={pagination}\r\n                                            itemsCount={itemsCount}\r\n                                            setPaginationLimit={this.setPaginationLimit}\r\n                                            setPaginationCurrent={this.setPaginationCurrent}\r\n                                        />\r\n                                    </>\r\n                                )\r\n                            }\r\n\r\n                        </>\r\n                    )\r\n                }\r\n            </>\r\n            )\r\n        }\r\n}\r\n\r\nconst decoratedComponent = connectDecorator(IndexPage)\r\nexport {decoratedComponent as IndexPage};","import React, {Component} from 'react';\r\nimport { Carousel, Image  } from 'antd';\r\n\r\nexport default class PokemonImageCarousel extends Component{\r\n\r\n    render(){\r\n        const { spritesArr } = this.props\r\n        return (\r\n            <>\r\n                <div className='margin-block-in-container-in-pokemon'>\r\n                    <Carousel\r\n                        className={'carousel-size'}\r\n                        autoplay\r\n                        dots={false}\r\n                    >\r\n                        {\r\n                            spritesArr.map(( item, index ) => {\r\n                                return (\r\n                                    <div key={index}>\r\n                                        <Image\r\n                                            className={'carousel-item'}\r\n                                            // width={450}\r\n                                            src={item}\r\n                                        />\r\n                                        {/*<img*/}\r\n                                        {/*    className={'carousel-item'}*/}\r\n                                        {/*    src={item}*/}\r\n                                        {/*    alt=\"\"*/}\r\n                                        {/*/>*/}\r\n                                    </div>\r\n                                )\r\n                            })\r\n                        }\r\n                    </Carousel>\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n}","import React, {Component} from 'react';\r\nimport { Radar } from \"react-chartjs-2\"\r\nimport Loading from \"../UI/Loading\";\r\nimport {connect} from \"react-redux\";\r\nimport {getPokemonByName} from \"../../services/actions/pokemons\";\r\n\r\n\r\nconst connectDecorator = connect(\r\n    null,\r\n    { getPokemonByName }\r\n);\r\n\r\n\r\n// const data = {\r\n//     labels: [\r\n//         'Eating',\r\n//         'Drinking',\r\n//         'Sleeping',\r\n//         'Designing',\r\n//         'Coding',\r\n//         'Cycling',\r\n//         'Running'\r\n//     ],\r\n//     datasets: [{\r\n//         label: 'My Second Dataset',\r\n//         data: [28, 48, 40, 19, 96, 27, 100],\r\n//         fill: true,\r\n//         backgroundColor: 'rgba(54, 162, 235, 0.2)',\r\n//         borderColor: 'rgb(54, 162, 235)',\r\n//         pointBackgroundColor: 'rgb(54, 162, 235)',\r\n//         pointBorderColor: '#fff',\r\n//         pointHoverBackgroundColor: '#fff',\r\n//         pointHoverBorderColor: 'rgb(54, 162, 235)'\r\n//     }]\r\n// };\r\n\r\nclass PokemonStats extends Component{\r\n    state = {\r\n        width: 500,\r\n        height: 500,\r\n        Loading: true,\r\n        data: {\r\n            labels: [\r\n                'Hp',\r\n                'Attack',\r\n                'Defense',\r\n                'Special attack',\r\n                'Special defense',\r\n                'Speed',\r\n            ],\r\n            datasets: [{\r\n                label: 'My Second Dataset',\r\n                data: [28, 48, 40, 19, 96, 27],\r\n                fill: true,\r\n                backgroundColor: 'rgba(54, 162, 235, 0.2)',\r\n                borderColor: 'rgb(54, 162, 235)',\r\n                pointBackgroundColor: 'rgb(54, 162, 235)',\r\n                pointBorderColor: '#fff',\r\n                pointHoverBackgroundColor: '#fff',\r\n                pointHoverBorderColor: 'rgb(54, 162, 235)'\r\n            }]\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setPokemonFromProps()\r\n    }\r\n\r\n    setPokemonFromProps = async () => { ///// Md bug\r\n        const { pokemon } = this.props\r\n        const datasets = {\r\n            label: pokemon.name,\r\n            data: this.getArrStat(pokemon),\r\n            fill: true,\r\n            backgroundColor: 'rgba(54, 162, 235, 0.2)',\r\n            borderColor: 'rgb(54, 162, 235)',\r\n            pointBackgroundColor: 'rgb(54, 162, 235)',\r\n            pointBorderColor: '#fff',\r\n            pointHoverBackgroundColor: '#fff',\r\n            pointHoverBorderColor: 'rgb(54, 162, 235)'\r\n        }\r\n\r\n        // stats.forEach(( item ) => {\r\n        //     datasets.data.push(item.base_stat)\r\n        // })\r\n\r\n        let datasets2 = null\r\n        const favorite = localStorage.getItem('favorite')\r\n        if(favorite && favorite !== pokemon.name){\r\n            const res = await this.props.getPokemonByName(favorite)\r\n            datasets2 = {\r\n                label: res.name,\r\n                data: this.getArrStat(res),\r\n                fill: true,\r\n                backgroundColor: 'rgba(255, 99, 132, 0.2)',\r\n                borderColor: 'rgb(255, 99, 132)',\r\n                pointBackgroundColor: 'rgb(255, 99, 132)',\r\n                pointBorderColor: '#fff',\r\n                pointHoverBackgroundColor: '#fff',\r\n                pointHoverBorderColor: 'rgb(255, 99, 132)'\r\n            }\r\n        }\r\n\r\n        if(datasets2) {\r\n            this.setState({\r\n                data: {\r\n                    ...this.state.data,\r\n                    datasets: [datasets, datasets2]\r\n                }\r\n            })\r\n        }else{\r\n            this.setState({\r\n                data: {\r\n                    ...this.state.data,\r\n                    datasets: [datasets]\r\n                }\r\n            })\r\n        }\r\n\r\n\r\n        this.setState({\r\n            loading: false\r\n        })\r\n    }\r\n\r\n    getArrStat = (pokemon) => {\r\n        let arrStat = []\r\n        pokemon.stats.forEach(( item ) => {\r\n            arrStat.push(item.base_stat)\r\n        })\r\n        return arrStat\r\n    }\r\n\r\n    render(){\r\n        const { width, height, data, loading } = this.state\r\n        return (\r\n            <>\r\n                {\r\n                    loading && (\r\n                        <Loading/>\r\n                    )\r\n                }\r\n                {\r\n                    !loading && (\r\n                        <div\r\n                            // style={{ width: width, height: height }}\r\n                            className='margin-block-in-container-in-pokemon pokemon-stats-size'\r\n                        >\r\n                            <Radar\r\n                                className={'char-radar-bg'}\r\n                                type={'radar'}\r\n                                height={width}\r\n                                width={height}\r\n                                data={data}\r\n                            />\r\n                        </div>\r\n                    )\r\n                }\r\n\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nconst decoratedComponent = connectDecorator(PokemonStats)\r\nexport {decoratedComponent as PokemonStats};","import React, {Component} from 'react';\r\nimport { getAbilitie } from \"../../services/actions/pokemons\";\r\nimport { connect } from 'react-redux';\r\nimport { Modal, Input, Tag } from 'antd';\r\nimport Loading from \"../UI/Loading\";\r\n\r\n\r\nconst connectDecorator = connect(\r\n    null,\r\n    { getAbilitie }\r\n);\r\n\r\nclass ModalAbilities extends Component{\r\n    state = {\r\n        loading: true,\r\n        isModalVisible: false,\r\n        info: null\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getInfo()\r\n    }\r\n\r\n    getInfo = async () => {\r\n        const { abilityModal } = this.props\r\n        this.setState({ isModalVisible: true })\r\n        this.setState({ loading: true })\r\n        ///\r\n        const res = await this.props.getAbilitie(abilityModal)\r\n        this.setState({ info: res })\r\n        ///\r\n        this.setState({ loading: false })\r\n    }\r\n\r\n    handleOk = () => {\r\n        this.setState({ isModalVisible: false })\r\n        this.props.showAbilityModal(null)\r\n    };\r\n\r\n    handleCancel = () => {\r\n        this.setState({ isModalVisible: false })\r\n        this.props.showAbilityModal(null)\r\n    };\r\n\r\n    normalizeText = (text) => {\r\n        return (text.charAt(0).toUpperCase() + text.slice(1)).replaceAll('_', ' ').replaceAll('-', ' ')\r\n    }\r\n\r\n    openPokemon = (name) => {\r\n        window.location.href = \"/pokemon/\" + name\r\n    }\r\n\r\n    render() {\r\n        const { loading, isModalVisible, info } = this.state\r\n        const { abilityModal } = this.props\r\n        return (\r\n            <>\r\n                <Modal\r\n                    title={\"Abilitie: \" + abilityModal}\r\n                    visible={isModalVisible}\r\n                    onOk={this.handleOk}\r\n                    onCancel={this.handleCancel}\r\n                >\r\n                    {\r\n                        loading && (\r\n                            <Loading/>\r\n                        )\r\n                    }\r\n                    {\r\n                        !loading && (\r\n                            <>\r\n                                <Input.TextArea\r\n                                    defaultValue={info.effect_entries[1].effect}\r\n                                    disabled={true}\r\n                                    autoSize={{\r\n                                        minRows: 3, maxRows: 20\r\n                                    }}\r\n                                />\r\n                                <div>Pokemons</div>\r\n                                {\r\n                                    info.pokemon.map(( item ) => {\r\n                                        return <>\r\n                                            <Tag\r\n                                                className=\"margin-around-tag cursor-pointer\"\r\n                                                onClick={() => this.openPokemon(item.pokemon.name) }\r\n                                            >\r\n                                                {this.normalizeText(item.pokemon.name)}\r\n                                            </Tag>\r\n                                        </>\r\n                                    })\r\n                                }\r\n                            </>\r\n                        )\r\n                    }\r\n                </Modal>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nconst decoratedComponent = connectDecorator(ModalAbilities)\r\nexport {decoratedComponent as ModalAbilities};","import React, {Component} from 'react';\r\nimport { getForm } from \"../../services/actions/pokemons\";\r\nimport { connect } from 'react-redux';\r\nimport { Modal, Form } from 'antd';\r\nimport Loading from \"../UI/Loading\";\r\n\r\n\r\nconst connectDecorator = connect(\r\n    null,\r\n    { getForm }\r\n);\r\n\r\nclass ModalForms extends Component{\r\n    state = {\r\n        loading: true,\r\n        isModalVisible: false,\r\n        info: null\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getInfo()\r\n    }\r\n\r\n    getInfo = async () => {\r\n        const { formModal } = this.props\r\n        this.setState({ isModalVisible: true })\r\n        this.setState({ loading: true })\r\n        ///\r\n        const res = await this.props.getForm(formModal)\r\n        await this.setState({ info: res })\r\n        console.log(res);\r\n        ///\r\n        this.setState({ loading: false })\r\n    }\r\n\r\n    handleOk = () => {\r\n        this.setState({ isModalVisible: false })\r\n        this.props.showFormModal(null)\r\n    };\r\n\r\n    handleCancel = () => {\r\n        this.setState({ isModalVisible: false })\r\n        this.props.showFormModal(null)\r\n    };\r\n\r\n    normalizeText = (text) => {\r\n        return (text.charAt(0).toUpperCase() + text.slice(1)).replaceAll('_', ' ').replaceAll('-', ' ')\r\n    }\r\n\r\n    render() {\r\n        const { loading, isModalVisible, info } = this.state\r\n        const { formModal } = this.props\r\n        return (\r\n            <>\r\n                <Modal\r\n                    title={\"Form: \" + this.normalizeText(formModal)}\r\n                    visible={isModalVisible}\r\n                    onOk={this.handleOk}\r\n                    onCancel={this.handleCancel}\r\n                >\r\n                    {\r\n                        loading && (\r\n                            <Loading/>\r\n                        )\r\n                    }\r\n                    {\r\n                        !loading && (\r\n                            <>\r\n                                <Form\r\n                                    labelCol={{ span: 6, offset: 6 }}\r\n                                    layout=\"horizontal\"\r\n                                >\r\n                                    <Form.Item label={this.normalizeText('form_name') + \":\"} name=\"form_name\">\r\n                                        {this.normalizeText(info.form_name)}\r\n                                    </Form.Item>\r\n\r\n                                    <Form.Item label={this.normalizeText('is_battle_only') + \":\"} name=\"is_battle_only\">\r\n                                        {info.is_battle_only && (\r\n                                            <>Yes</>\r\n                                        )}\r\n                                        {!info.is_battle_only && (\r\n                                            <>No</>\r\n                                        )}\r\n                                    </Form.Item>\r\n\r\n                                    <Form.Item label={this.normalizeText('is_default') + \":\"} name=\"is_battle_only\">\r\n                                        {info.is_default && (\r\n                                            <>Yes</>\r\n                                        )}\r\n                                        {!info.is_default && (\r\n                                            <>No</>\r\n                                        )}\r\n                                    </Form.Item>\r\n\r\n                                    <Form.Item label={this.normalizeText('order') + \":\"} name=\"order\">\r\n                                        {info.is_default && (\r\n                                            <>Yes</>\r\n                                        )}\r\n                                        {!info.is_default && (\r\n                                            <>No</>\r\n                                        )}\r\n                                    </Form.Item>\r\n\r\n                                    <Form.Item label={this.normalizeText('order') + \":\"} name=\"order\">\r\n                                        {info.order}\r\n                                    </Form.Item>\r\n                                </Form>\r\n\r\n                            </>\r\n                        )\r\n                    }\r\n                </Modal>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nconst decoratedComponent = connectDecorator(ModalForms)\r\nexport {decoratedComponent as ModalForms};","import React, {Component} from 'react';\r\nimport { getHeldItem } from \"../../services/actions/pokemons\";\r\nimport { connect } from 'react-redux';\r\nimport {Modal, Form, Tag, Input} from 'antd';\r\nimport Loading from \"../UI/Loading\";\r\n\r\n\r\nconst connectDecorator = connect(\r\n    null,\r\n    { getHeldItem }\r\n);\r\n\r\nclass ModalHeldItems extends Component{\r\n    state = {\r\n        loading: true,\r\n        isModalVisible: false,\r\n        info: null\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getInfo()\r\n    }\r\n\r\n    getInfo = async () => {\r\n        const { heldItemModal } = this.props\r\n        this.setState({ isModalVisible: true })\r\n        this.setState({ loading: true })\r\n        ///\r\n        const res = await this.props.getHeldItem(heldItemModal)\r\n        await this.setState({ info: res })\r\n        console.log(res);\r\n        ///\r\n        this.setState({ loading: false })\r\n    }\r\n\r\n    handleOk = () => {\r\n        this.setState({ isModalVisible: false })\r\n        this.props.showHeldItemsModal(null)\r\n    };\r\n\r\n    handleCancel = () => {\r\n        this.setState({ isModalVisible: false })\r\n        this.props.showHeldItemsModal(null)\r\n    };\r\n\r\n    normalizeText = (text) => {\r\n        return (text.charAt(0).toUpperCase() + text.slice(1)).replaceAll('_', ' ').replaceAll('-', ' ')\r\n    }\r\n\r\n    render() {\r\n        const { loading, isModalVisible, info } = this.state\r\n        const { heldItemModal } = this.props\r\n        return (\r\n            <>\r\n                <Modal\r\n                    title={\"Held item: \" + this.normalizeText(heldItemModal)}\r\n                    visible={isModalVisible}\r\n                    onOk={this.handleOk}\r\n                    onCancel={this.handleCancel}\r\n                >\r\n                    {\r\n                        loading && (\r\n                            <Loading/>\r\n                        )\r\n                    }\r\n                    {\r\n                        !loading && (\r\n                            <>\r\n                                <Form\r\n                                    labelCol={{ span: 6, offset: 6 }}\r\n                                    layout=\"horizontal\"\r\n                                >\r\n                                    <Form.Item label={this.normalizeText('flavor_text_entries') + \":\"} name=\"flavor_text_entries\">\r\n                                        <Input.TextArea\r\n                                            defaultValue={info.flavor_text_entries[0].text}\r\n                                            disabled={true}\r\n                                            autoSize={{\r\n                                                minRows: 3, maxRows: 20\r\n                                            }}\r\n                                        />\r\n                                    </Form.Item>\r\n\r\n\r\n                                    <Form.Item label={this.normalizeText('attributes') + \":\"} name=\"attributes\">\r\n                                        { info.attributes.map(( item ) => {\r\n                                            return <>\r\n                                                <Tag className=\"margin-around-tag\" key={item.id}>\r\n                                                    { item.name }\r\n                                                </Tag>\r\n                                            </>\r\n                                        } )\r\n                                        }\r\n                                    </Form.Item>\r\n\r\n                                    <Form.Item label={this.normalizeText('category') + \":\"} name=\"category\">\r\n                                        {this.normalizeText(info.category.name)}\r\n                                    </Form.Item>\r\n\r\n                                    <Form.Item label={this.normalizeText('cost') + \":\"} name=\"cost\">\r\n                                        {info.cost}\r\n                                    </Form.Item>\r\n\r\n                                    <Form.Item label={this.normalizeText('fling_power') + \":\"} name=\"fling_power\">\r\n                                        {info.fling_power}\r\n                                    </Form.Item>\r\n\r\n                                    <Form.Item label={this.normalizeText('held_by_pokemon') + \":\"} name=\"held_by_pokemon\">\r\n                                        { info.held_by_pokemon.map(( item ) => {\r\n                                            return <Tag className=\"margin-around-tag\" key={item.id}>\r\n                                                    { item.pokemon.name }\r\n                                                </Tag>\r\n                                        } )\r\n                                        }\r\n                                    </Form.Item>\r\n                                </Form>\r\n                            </>\r\n                        )\r\n                    }\r\n                </Modal>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nconst decoratedComponent = connectDecorator(ModalHeldItems)\r\nexport {decoratedComponent as ModalHeldItems};","import React, {Component} from 'react';\r\nimport { getType } from \"../../services/actions/pokemons\";\r\nimport { connect } from 'react-redux';\r\nimport {Modal, Form, Tag } from 'antd';\r\nimport Loading from \"../UI/Loading\";\r\n\r\n\r\nconst connectDecorator = connect(\r\n    null,\r\n    { getType }\r\n);\r\n\r\nclass ModalType extends Component{\r\n    state = {\r\n        loading: true,\r\n        isModalVisible: false,\r\n        info: null\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getInfo()\r\n    }\r\n\r\n    getInfo = async () => {\r\n        const { typeModal } = this.props\r\n        this.setState({ isModalVisible: true })\r\n        this.setState({ loading: true })\r\n        ///\r\n        const res = await this.props.getType(typeModal)\r\n        await this.setState({ info: res })\r\n        console.log(res);\r\n        ///\r\n        this.setState({ loading: false })\r\n    }\r\n\r\n    handleOk = () => {\r\n        this.setState({ isModalVisible: false })\r\n        this.props.showTypeModal(null)\r\n    };\r\n\r\n    handleCancel = () => {\r\n        this.setState({ isModalVisible: false })\r\n        this.props.showTypeModal(null)\r\n    };\r\n\r\n    normalizeText = (text) => {\r\n        return (text.charAt(0).toUpperCase() + text.slice(1)).replaceAll('_', ' ').replaceAll('-', ' ')\r\n    }\r\n\r\n    render() {\r\n        const { loading, isModalVisible, info } = this.state\r\n        const { typeModal } = this.props\r\n        return (\r\n            <>\r\n                <Modal\r\n                    title={\"Type: \" + this.normalizeText(typeModal)}\r\n                    visible={isModalVisible}\r\n                    onOk={this.handleOk}\r\n                    onCancel={this.handleCancel}\r\n                >\r\n                    {\r\n                        loading && (\r\n                            <Loading/>\r\n                        )\r\n                    }\r\n                    {\r\n                        !loading && (\r\n                            <>\r\n                                <Form\r\n                                    labelCol={{ span: 8, offset: 8 }}\r\n                                    layout=\"horizontal\"\r\n                                >\r\n\r\n                                    <Form.Item label={this.normalizeText('move_damage_class') + \":\"} name=\"move_damage_class\">\r\n                                        {this.normalizeText(info.move_damage_class.name)}\r\n                                    </Form.Item>\r\n\r\n                                    <Form.Item label={this.normalizeText('moves') + \":\"} name=\"moves\">\r\n                                        {\r\n                                            info.moves.map(( item ) => {\r\n                                                return <Tag\r\n                                                    key={item.id}\r\n                                                    className=\"margin-around-tag\"\r\n                                                >\r\n                                                    {item.name}\r\n                                                </Tag>\r\n                                            })\r\n                                        }\r\n                                    </Form.Item>\r\n                                </Form>\r\n                            </>\r\n                        )\r\n                    }\r\n                </Modal>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nconst decoratedComponent = connectDecorator(ModalType)\r\nexport {decoratedComponent as ModalType};","import React, {Component} from 'react';\r\nimport { getLocation } from \"../../services/actions/pokemons\";\r\nimport { connect } from 'react-redux';\r\nimport {Modal, Form, Tag } from 'antd';\r\nimport Loading from \"../UI/Loading\";\r\n\r\n\r\nconst connectDecorator = connect(\r\n    null,\r\n    { getLocation }\r\n);\r\n\r\nclass ModalLocation extends Component{\r\n    state = {\r\n        loading: true,\r\n        isModalVisible: false,\r\n        info: null\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getInfo()\r\n    }\r\n\r\n    getInfo = async () => {\r\n        const { locationModal } = this.props\r\n        this.setState({ isModalVisible: true })\r\n        this.setState({ loading: true })\r\n        ///\r\n        const res = await this.props.getLocation(locationModal)\r\n        await this.setState({ info: res })\r\n        console.log(res);\r\n        ///\r\n        this.setState({ loading: false })\r\n    }\r\n\r\n    handleOk = () => {\r\n        this.setState({ isModalVisible: false })\r\n        this.props.showLocationModal(null)\r\n    };\r\n\r\n    handleCancel = () => {\r\n        this.setState({ isModalVisible: false })\r\n        this.props.showLocationModal(null)\r\n    };\r\n\r\n    normalizeText = (text) => {\r\n        return (text.charAt(0).toUpperCase() + text.slice(1)).replaceAll('_', ' ').replaceAll('-', ' ')\r\n    }\r\n\r\n    render() {\r\n        const { loading, isModalVisible, info } = this.state\r\n        const { locationModal } = this.props\r\n        return (\r\n            <>\r\n                <Modal\r\n                    title={\"Location: \" + this.normalizeText(locationModal)}\r\n                    visible={isModalVisible}\r\n                    onOk={this.handleOk}\r\n                    onCancel={this.handleCancel}\r\n                >\r\n                    {\r\n                        loading && (\r\n                            <Loading/>\r\n                        )\r\n                    }\r\n                    {\r\n                        !loading && (\r\n                            <>\r\n                                <Form\r\n                                    labelCol={{ span: 8, offset: 2 }}\r\n                                    layout=\"horizontal\"\r\n                                >\r\n\r\n                                    <Form.Item label={this.normalizeText('game_index') + \":\"} name=\"game_index\">\r\n                                        {info.game_index}\r\n                                    </Form.Item>\r\n\r\n                                    <Form.Item label={this.normalizeText('pokemon_encounters') + \":\"} name=\"pokemon_encounters\">\r\n                                        {\r\n                                            info.pokemon_encounters.map(( item ) => {\r\n                                                return <Tag\r\n                                                    key={item.id}\r\n                                                    className=\"margin-around-tag\"\r\n                                                >\r\n                                                    {item.pokemon.name}\r\n                                                </Tag>\r\n                                            })\r\n                                        }\r\n                                    </Form.Item>\r\n                                </Form>\r\n                            </>\r\n                        )\r\n                    }\r\n                </Modal>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nconst decoratedComponent = connectDecorator(ModalLocation)\r\nexport {decoratedComponent as ModalLocation};","import React, {Component} from 'react';\r\nimport { getMove } from \"../../services/actions/pokemons\";\r\nimport { connect } from 'react-redux';\r\nimport { Modal, Form } from 'antd';\r\nimport Loading from \"../UI/Loading\";\r\n\r\n\r\nconst connectDecorator = connect(\r\n    null,\r\n    { getMove }\r\n);\r\n\r\nclass ModalMoves extends Component{\r\n    state = {\r\n        loading: true,\r\n        isModalVisible: false,\r\n        info: null\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getInfo()\r\n    }\r\n\r\n    getInfo = async () => {\r\n        const { movesModal } = this.props\r\n        this.setState({ isModalVisible: true })\r\n        this.setState({ loading: true })\r\n\r\n        const res = await this.props.getMove(movesModal)\r\n        await this.setState({ info: res })\r\n\r\n        this.setState({ loading: false })\r\n    }\r\n\r\n    handleOk = () => {\r\n        this.setState({ isModalVisible: false })\r\n        this.props.showMovesModal(null)\r\n    };\r\n\r\n    handleCancel = () => {\r\n        this.setState({ isModalVisible: false })\r\n        this.props.showMovesModal(null)\r\n    };\r\n\r\n    normalizeText = (text) => {\r\n        return (text.charAt(0).toUpperCase() + text.slice(1)).replaceAll('_', ' ').replaceAll('-', ' ')\r\n    }\r\n\r\n    render() {\r\n        const { loading, isModalVisible, info } = this.state\r\n        const { movesModal } = this.props\r\n        return (\r\n            <>\r\n                <Modal\r\n                    title={\"Form \" + movesModal}\r\n                    visible={isModalVisible}\r\n                    onOk={this.handleOk}\r\n                    onCancel={this.handleCancel}\r\n                >\r\n                    {\r\n                        loading && (\r\n                            <Loading/>\r\n                        )\r\n                    }\r\n                    {\r\n                        !loading && (\r\n                            <>\r\n                                <Form\r\n                                    labelCol={{ span: 6, offset: 6 }}\r\n                                    layout=\"horizontal\"\r\n                                >\r\n                                    <Form.Item label={this.normalizeText('name') + \":\"} name=\"name\">\r\n                                        {this.normalizeText(info.name)}\r\n                                    </Form.Item>\r\n\r\n                                    <Form.Item label={this.normalizeText('contest_type') + \":\"} name=\"contest_type\">\r\n                                        {this.normalizeText(info.contest_type.name)}\r\n                                    </Form.Item>\r\n\r\n                                    <Form.Item label={this.normalizeText('damage_class') + \":\"} name=\"damage_class\">\r\n                                        {this.normalizeText(info.damage_class.name)}\r\n                                    </Form.Item>\r\n\r\n                                    <Form.Item label={this.normalizeText('generation') + \":\"} name=\"generation\">\r\n                                        {this.normalizeText(info.generation.name)}\r\n                                    </Form.Item>\r\n\r\n                                    <Form.Item label={this.normalizeText('target') + \":\"} name=\"target\">\r\n                                        {this.normalizeText(info.target.name)}\r\n                                    </Form.Item>\r\n\r\n                                    <Form.Item label={this.normalizeText('priority') + \":\"} name=\"priority\">\r\n                                        {info.priority}\r\n                                    </Form.Item>\r\n\r\n                                </Form>\r\n                            </>\r\n                        )\r\n                    }\r\n                </Modal>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nconst decoratedComponent = connectDecorator(ModalMoves)\r\nexport {decoratedComponent as ModalMoves};","import React, {Component} from 'react';\r\nimport { getLocationsArea } from \"../../services/actions/pokemons\";\r\nimport { connect } from 'react-redux';\r\nimport { List, Divider, Tag } from 'antd';\r\nimport Loading from \"../UI/Loading\";\r\nimport { ModalAbilities } from \"../Modal/ModalAbilities\";\r\nimport { ModalForms } from \"../Modal/ModalForms\";\r\nimport { ModalHeldItems } from \"../Modal/ModalHeldItems\";\r\nimport { ModalType } from \"../Modal/ModalType\";\r\nimport { ModalLocation } from \"../Modal/ModalLocation\";\r\n\r\nimport {\r\n    TrophyOutlined,\r\n    TableOutlined,\r\n    ColumnHeightOutlined,\r\n    ColumnWidthOutlined,\r\n    NumberOutlined,\r\n    ThunderboltOutlined,\r\n    ShoppingOutlined,\r\n    ApartmentOutlined,\r\n    FlagOutlined,\r\n    TagsOutlined,\r\n    GitlabOutlined,\r\n} from '@ant-design/icons';\r\nimport {ModalMoves} from \"../Modal/ModalMoves\";\r\n\r\nconst connectDecorator = connect(\r\n    null,\r\n    { getLocationsArea }\r\n);\r\n\r\nclass MainInfo extends Component{\r\n    state = {\r\n        loading: true,\r\n        params: ['base_experience', 'height', 'weight', 'order', 'location_area_encounters', 'abilities', 'moves', 'held_items', 'forms', 'types'],\r\n        webSite: 'https://www.pokemon.com/us/pokedex/',\r\n        locations: [],\r\n        abilityModal: null,\r\n        formModal: null,\r\n        movesModal: null,\r\n        heldItemModal: null,\r\n        dataList: []\r\n    }\r\n    componentDidMount() {\r\n        this.getMainInfo()\r\n        this.startGetLocationArea()\r\n        // const word = this.normalizeText('location_area_encounters')\r\n        // console.log(word);\r\n    }\r\n\r\n\r\n    getMainInfo = () => {\r\n        const { dataList, params } = this.state\r\n        const { pokemon } = this.props\r\n        if( pokemon ) {\r\n            Object.keys(pokemon).forEach(( pokemonInfo ) => {\r\n                if(pokemonInfo) {\r\n                    if( params.includes(pokemonInfo) ){\r\n                        let newDataList = dataList\r\n                        newDataList.push(\r\n                            {\r\n                                key: pokemonInfo,\r\n                                value: pokemon[pokemonInfo]\r\n                            }\r\n                        )\r\n                        this.setState({ dataList: newDataList})\r\n                    }\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    startGetLocationArea = async () => {\r\n        const findE = this.state.dataList.find(e => e.key === 'location_area_encounters')\r\n        const res = await this.getLocationArea(findE.value)\r\n        this.setState({ locations: res })\r\n        this.setState({ loading: false })\r\n    }\r\n\r\n    getLocationArea = async (urlLocation) => {\r\n        const urlId = urlLocation.split('/')\r\n        return await this.props.getLocationsArea(urlId[urlId.length - 2])\r\n    }\r\n\r\n    normalizeText = (text) => {\r\n        return (text.charAt(0).toUpperCase() + text.slice(1)).replaceAll('_', ' ').replaceAll('-', ' ')\r\n    }\r\n\r\n    openWiki = (name) => {\r\n        const { webSite } = this.state\r\n        window.open( webSite + name, \"_blank\")\r\n    }\r\n\r\n    showAbilityModal = (name) => {\r\n        this.setState({ abilityModal: name })\r\n    }\r\n\r\n    showFormModal = (name) => {\r\n        this.setState({ formModal: name })\r\n    }\r\n\r\n    showMovesModal = (name) => {\r\n        this.setState({ movesModal: name })\r\n    }\r\n\r\n    showHeldItemsModal = (name) => {\r\n        this.setState({ heldItemModal: name })\r\n    }\r\n\r\n    showTypeModal = (name) => {\r\n        this.setState({ typeModal: name })\r\n    }\r\n\r\n    showLocationModal = (name) => {\r\n        this.setState({ locationModal: name })\r\n    }\r\n\r\n    render() {\r\n        const { dataList, loading, locations, webSite,\r\n            abilityModal, formModal, movesModal, heldItemModal, typeModal, locationModal } = this.state\r\n        const { pokemon: { name } } = this.props\r\n        return (\r\n            <>\r\n                {\r\n                    loading && (\r\n                        <>\r\n                            <Loading/>\r\n                        </>\r\n                    )\r\n                }\r\n                {\r\n                    !loading && (\r\n                        <>\r\n                            <Divider orientation=\"left\">Basic information about Pokemon: {this.normalizeText(name)}</Divider>\r\n                            <List\r\n                                size=\"large\"\r\n                                footer={\r\n                                    <div\r\n                                        className=\"cursor-pointer\"\r\n                                        onClick={() => this.openWiki(name)}\r\n                                    >\r\n                                        {\r\n                                            webSite + name\r\n                                        }\r\n                                        <GitlabOutlined className='list-item-icon-margin-left'/>\r\n                                    </div>\r\n                                }\r\n                                bordered\r\n                                dataSource={dataList}\r\n                                renderItem={ item => (\r\n                                    <List.Item key={item.id}>\r\n                                        <List.Item.Meta\r\n                                            title={<div>{this.normalizeText(item.key)}:</div>}\r\n                                        />\r\n                                        {\r\n                                            item.key === 'base_experience' && (\r\n                                                <>\r\n                                                    <div>\r\n                                                        {item.value}\r\n                                                        <TrophyOutlined className='list-item-icon-margin-left'/>\r\n                                                    </div>\r\n                                                </>\r\n                                            )\r\n                                        }\r\n                                        {\r\n                                            item.key === 'height' && (\r\n                                                <>\r\n                                                    <div>\r\n                                                        {item.value}\r\n                                                        <ColumnHeightOutlined className='list-item-icon-margin-left'/>\r\n                                                    </div>\r\n                                                </>\r\n                                            )\r\n                                        }\r\n                                        {\r\n                                            item.key === 'weight' && (\r\n                                                <>\r\n                                                    <div>\r\n                                                        {item.value}\r\n                                                        <ColumnWidthOutlined  className='list-item-icon-margin-left'/>\r\n                                                    </div>\r\n                                                </>\r\n                                            )\r\n                                        }\r\n                                        {\r\n                                            item.key === 'order' && (\r\n                                                <>\r\n                                                    <div>\r\n                                                        {item.value}\r\n                                                        <NumberOutlined  className='list-item-icon-margin-left'/>\r\n                                                    </div>\r\n                                                </>\r\n                                            )\r\n                                        }\r\n                                        {\r\n                                            item.key === 'moves' && (\r\n                                                <>\r\n                                                    <div className='list-item-icon-margin-left-arr'>\r\n                                                        {item.value.map( (move) => {\r\n                                                            return <Tag\r\n                                                                    className=\"margin-around-tag cursor-pointer\"\r\n                                                                    key={move.move.name}\r\n                                                                    onClick={() => this.showMovesModal(move.move.name)}\r\n                                                                >\r\n                                                                    {this.normalizeText(move.move.name)}\r\n                                                                </Tag>\r\n                                                        })}\r\n                                                        <TableOutlined className='list-item-icon-margin-left'/>\r\n                                                    </div>\r\n                                                </>\r\n                                            )\r\n                                        }\r\n                                        {\r\n                                            item.key === 'abilities' && (\r\n                                                <>\r\n                                                    <div className='list-item-icon-margin-left-arr'>\r\n                                                        {item.value.map( (abilityItem) => {\r\n                                                            return <Tag\r\n                                                                    className=\"margin-around-tag cursor-pointer\"\r\n                                                                    key={abilityItem.ability.name}\r\n                                                                    onClick={() => this.showAbilityModal(abilityItem.ability.name)}\r\n                                                                >\r\n                                                                    {this.normalizeText(abilityItem.ability.name)}\r\n                                                                </Tag>\r\n                                                        })}\r\n                                                        <ThunderboltOutlined className='list-item-icon-margin-left'/>\r\n                                                    </div>\r\n                                                </>\r\n                                            )\r\n                                        }\r\n                                        {\r\n                                            item.key === 'held_items' && (\r\n                                                <>\r\n                                                    <div className='list-item-icon-margin-left-arr'>\r\n                                                        {item.value.map( (heldItems, index) => {\r\n                                                            return <Tag\r\n                                                                    className=\"margin-around-tag cursor-pointer\"\r\n                                                                    key={heldItems.item.name}\r\n                                                                    onClick={() => this.showHeldItemsModal(heldItems.item.name)}\r\n                                                                >\r\n                                                                    {this.normalizeText(heldItems.item.name)}\r\n                                                                </Tag>\r\n                                                        })}\r\n                                                        <ShoppingOutlined className='list-item-icon-margin-left'/>\r\n                                                    </div>\r\n                                                </>\r\n                                            )\r\n                                        }\r\n                                        {\r\n                                            item.key === 'forms' && (\r\n                                                <>\r\n                                                    <div className='list-item-icon-margin-left-arr'>\r\n                                                        {item.value.map( (formItem) => {\r\n                                                            return <Tag\r\n                                                                    className=\"margin-around-tag cursor-pointer\"\r\n                                                                    key={formItem.name}\r\n                                                                    onClick={() => this.showFormModal(formItem.name)}\r\n                                                                >\r\n                                                                    {this.normalizeText(formItem.name)}\r\n                                                                </Tag>\r\n                                                        })}\r\n                                                        <ApartmentOutlined className='list-item-icon-margin-left'/>\r\n                                                    </div>\r\n                                                </>\r\n                                            )\r\n                                        }\r\n                                        {\r\n                                            item.key === 'types' && (\r\n                                                <>\r\n                                                    <div className='list-item-icon-margin-left-arr'>\r\n                                                        {item.value.map( (typesItem) => {\r\n                                                            return <Tag\r\n                                                                    className=\"margin-around-tag cursor-pointer\"\r\n                                                                    key={typesItem.type.name}\r\n                                                                    onClick={() => this.showTypeModal(typesItem.type.name)}\r\n                                                                >\r\n                                                                    {this.normalizeText(typesItem.type.name)}\r\n                                                                </Tag>\r\n                                                        })}\r\n                                                        <TagsOutlined className='list-item-icon-margin-left'/>\r\n                                                    </div>\r\n                                                </>\r\n                                            )\r\n                                        }\r\n                                        {\r\n                                            item.key === 'location_area_encounters' && (\r\n                                                <>\r\n                                                    <div className='list-item-icon-margin-left-arr'>\r\n                                                        { locations.map( (locationsItem) => {\r\n                                                            return <Tag\r\n                                                                className=\"margin-around-tag cursor-pointer\"\r\n                                                                key={locationsItem.location_area.name}\r\n                                                                onClick={() => this.showLocationModal(locationsItem.location_area.name)}\r\n                                                            >\r\n                                                                {this.normalizeText(locationsItem.location_area.name)}\r\n                                                            </Tag>\r\n\r\n                                                        })\r\n                                                        }\r\n                                                        <FlagOutlined className='list-item-icon-margin-left'/>\r\n                                                    </div>\r\n                                                </>\r\n                                            )\r\n                                        }\r\n                                    </List.Item>\r\n                                )\r\n                                }\r\n                            />\r\n\r\n                            {\r\n                                abilityModal && (\r\n                                    <ModalAbilities\r\n                                        abilityModal={abilityModal}\r\n                                        showAbilityModal={this.showAbilityModal}\r\n                                    />\r\n                                )\r\n                            }\r\n\r\n                            {\r\n                                formModal && (\r\n                                    <ModalForms\r\n                                        formModal={formModal}\r\n                                        showFormModal={this.showFormModal}\r\n                                    />\r\n                                )\r\n                            }\r\n\r\n                            {\r\n                                movesModal && (\r\n                                    <ModalMoves\r\n                                        movesModal={movesModal}\r\n                                        showMovesModal={this.showMovesModal}\r\n                                    />\r\n                                )\r\n                            }\r\n\r\n                            {\r\n                                heldItemModal && (\r\n                                    <ModalHeldItems\r\n                                        heldItemModal={heldItemModal}\r\n                                        showHeldItemsModal={this.showHeldItemsModal}\r\n                                    />\r\n                                )\r\n                            }\r\n\r\n                            {\r\n                                typeModal && (\r\n                                    <ModalType\r\n                                        typeModal={typeModal}\r\n                                        showTypeModal={this.showTypeModal}\r\n                                    />\r\n                                )\r\n                            }\r\n\r\n                            {\r\n                                locationModal && (\r\n                                    <ModalLocation\r\n                                        locationModal={locationModal}\r\n                                        showLocationModal={this.showLocationModal}\r\n                                    />\r\n                                )\r\n                            }\r\n                        </>\r\n                    )\r\n                }\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nconst decoratedComponent = connectDecorator(MainInfo)\r\nexport {decoratedComponent as MainInfo};","import React, {Component} from 'react';\r\nimport { getPokemonByName, addPokemonToHistory } from \"../../services/actions/pokemons\";\r\nimport { connect } from 'react-redux';\r\nimport Loading from \"../../components/UI/Loading\";\r\nimport PokemonImageCarousel from \"../../components/pokemon/PokemonImageCarousel\";\r\nimport { PokemonStats } from \"../../components/pokemon/PokemonStats\";\r\nimport { MainInfo } from \"../../components/pokemon/MainInfo\";\r\n\r\nconst connectDecorator = connect(\r\n    null,\r\n    { getPokemonByName, addPokemonToHistory }\r\n);\r\n\r\nclass Pokemon extends Component{\r\n    state = {\r\n        loading: true,\r\n        pokemon: null,\r\n        spritesArr: [],\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getPokemon()\r\n    }\r\n\r\n    getPokemon = async () => {\r\n        const res = await this.props.getPokemonByName(this.props.match.params.name)\r\n        if(res.name === \"Error\") {\r\n            this.props.history.push('/Pokedex/')\r\n        }else{\r\n            await this.setState({ pokemon: res })\r\n            await this.getAllImage()\r\n            this.props.addPokemonToHistory(this.props.match.params.name)\r\n            this.setState({ loading: false })\r\n        }\r\n    }\r\n\r\n    getAllImage = () => {\r\n        const { pokemon: { sprites }, spritesArr } = this.state\r\n\r\n        Object.keys(sprites).forEach(( spriteUrl ) => {\r\n            if(spriteUrl) {\r\n                if( spriteUrl !== \"versions\" && spriteUrl !== 'other' && sprites[spriteUrl] ){\r\n                    let newPokemon = spritesArr\r\n                    newPokemon.push(sprites[spriteUrl])\r\n                    this.setState({ spritesArr: newPokemon})\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n\r\n    render() {\r\n        const { loading, spritesArr, pokemon } = this.state\r\n        const { history } = this.props\r\n        return (\r\n            <>\r\n                <div className=\"site-layout-content\">\r\n                    {\r\n                        loading && (\r\n                            <Loading/>\r\n                        )\r\n                    }\r\n                    {\r\n                        !loading && (\r\n                            <>\r\n                                <div className='pokemon-container-carousel-stats'>\r\n                                    <PokemonImageCarousel\r\n                                        spritesArr={spritesArr}\r\n                                    />\r\n\r\n                                    <PokemonStats\r\n                                        pokemon={pokemon}\r\n                                    />\r\n                                </div>\r\n\r\n                                <MainInfo\r\n                                    history={history}\r\n                                    pokemon={pokemon}\r\n                                />\r\n                            </>\r\n                        )\r\n                    }\r\n\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nconst decoratedComponent = connectDecorator(Pokemon)\r\nexport {decoratedComponent as Pokemon};","export default __webpack_public_path__ + \"static/media/randomPokemon.cc20331e.png\";","import React, {Component} from 'react';\r\nimport { Layout } from 'antd';\r\nimport randomPokemon from \"../../common/images/randomPokemon.png\"\r\nimport {Link} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport { removeFavoritePokemon, getPokemonById } from \"../../services/actions/pokemons\";\r\nimport {\r\n    DeleteTwoTone,\r\n    HistoryOutlined\r\n} from '@ant-design/icons';\r\n\r\nconst { Header } = Layout;\r\nconst connectDecorator = connect(\r\n    (state) => ({\r\n        favorite: state.favorite,\r\n        count: state.count\r\n    }),\r\n    { removeFavoritePokemon, getPokemonById }\r\n);\r\n\r\n\r\nclass HeaderApp extends Component{\r\n\r\n    removeFavorite = () => {\r\n        const { removeFavoritePokemon } = this.props\r\n        removeFavoritePokemon()\r\n    }\r\n\r\n    redirectOnFavorite = () => {\r\n        const { favorite } = this.props\r\n        window.location.href = \"/Pokedex/pokemon/\" + favorite\r\n    }\r\n\r\n    randomPokemon = async () => {\r\n        const { count } = this.props\r\n        const randomId = Math.floor( Math.random() * count)\r\n        const randomPokemon = await this.props.getPokemonById(randomId)\r\n        window.location.href = \"/Pokedex/pokemon/\" + randomPokemon.name\r\n    }\r\n\r\n    render(){\r\n        const { favorite } = this.props\r\n\r\n        return (\r\n            <>\r\n                <Header>\r\n                    <div className=\"logo\">\r\n                        <Link\r\n                            to=\"/Pokedex/\"\r\n                        >\r\n                            <img\r\n                                className=\"logo-img\"\r\n                                src=\"https://upload.wikimedia.org/wikipedia/commons/9/98/International_Pok%C3%A9mon_logo.svg\"\r\n                                alt=\"Logo\"\r\n                                onClick={this.redirectOnMain}\r\n                            />\r\n                        </Link>\r\n                        {\r\n                            favorite && (\r\n                                <>\r\n                                    <div className=\"container-favorite-header\">\r\n                                        <p onClick={this.redirectOnFavorite}>{favorite}</p>\r\n                                        <p className=\"margin-left-delete\" onClick={this.removeFavorite}><DeleteTwoTone twoToneColor=\"red\" /></p>\r\n                                    </div>\r\n                                </>\r\n                            )\r\n                        }\r\n\r\n                        <div >\r\n                            <Link to=\"/Pokedex/history\">\r\n                                <HistoryOutlined\r\n                                    className=\"history-image\"\r\n                                />\r\n                            </Link>\r\n\r\n                            <img\r\n                                onClick={this.randomPokemon}\r\n                                className=\"logo-img-random\"\r\n                                src={randomPokemon}\r\n                                alt=\"random pokemon\"/>\r\n                        </div>\r\n\r\n                    </div>\r\n                </Header>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nconst decoratedComponent = connectDecorator(HeaderApp)\r\nexport {decoratedComponent as HeaderApp};","import React, {Component} from 'react';\r\nimport { Row, Col  } from 'antd';\r\n\r\nimport { PokemonCard } from \"../../components/pokemon/PokemonCard\";\r\nimport Loading from \"../../components/UI/Loading\";\r\nimport { getPokemons } from \"../../services/actions/pokemons\";\r\nimport { connect } from 'react-redux';\r\nimport PokemonDoesNotExist from \"../../components/pokemon/PokemonDoesNotExist\";\r\n\r\nconst connectDecorator = connect(\r\n    (state) => ({\r\n        historyPokemon: state.historyPokemon,\r\n    }),\r\n    { getPokemons}\r\n);\r\n\r\nclass History extends Component{\r\n    state = {\r\n        loading: true,\r\n        pokemons: [],\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getPokemonFromHistory()\r\n    }\r\n\r\n    getPokemonFromHistory = () => {\r\n        const { historyPokemon } = this.props\r\n        if(historyPokemon) {\r\n            historyPokemon.forEach(( item ) => {\r\n                let arrPokemons = this.state.pokemons\r\n                let newObjPokemon = {\r\n                    name: item\r\n                }\r\n                arrPokemons.push(newObjPokemon)\r\n                this.setState({ pokemons: arrPokemons})\r\n            })\r\n        }\r\n        this.setState({ loading: false })\r\n    }\r\n\r\n\r\n    render() {\r\n        const { loading, pokemons } = this.state\r\n        return (\r\n            <>\r\n                {\r\n                    loading && ( <Loading/> )\r\n                }\r\n\r\n\r\n                {\r\n                    !loading && (\r\n                        <>\r\n                            {\r\n                                pokemons.length <= 0 && (\r\n                                    <>\r\n                                        <PokemonDoesNotExist/>\r\n                                    </>\r\n                                )\r\n                            }\r\n\r\n                            <Row\r\n                                justify=\"space-around\"\r\n                                gutter={[8, 40]}\r\n                                style={{ marginLeft: 0, marginRight: 0, marginTop: 10, marginBottom: 10 }}\r\n\r\n                            >\r\n                                {\r\n                                    pokemons.map(( pokemon, index ) => {\r\n                                        return (\r\n                                            <Col key={index}>\r\n                                                <PokemonCard\r\n                                                    pokemon={pokemon}\r\n                                                    history={this.props.history}\r\n                                                />\r\n                                            </Col>\r\n                                        )\r\n                                    })\r\n                                }\r\n                            </Row>\r\n                        </>\r\n                    )\r\n                }\r\n            </>\r\n            )\r\n        }\r\n}\r\n\r\nconst decoratedComponent = connectDecorator(History)\r\nexport {decoratedComponent as History};","import React, {Component} from 'react';\r\nimport { Result, Button } from 'antd';\r\n\r\nexport default class NotFound extends Component {\r\n\r\n\r\n    render(){\r\n        return (\r\n            <>\r\n                <Result\r\n                    status=\"404\"\r\n                    title=\"404\"\r\n                    subTitle=\"Sorry, the page you visited does not exist.\"\r\n                    extra={<Button type=\"primary\">Back Home</Button>}\r\n                />\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\n","import React, {Component} from 'react';\r\nimport { Layout, Affix } from 'antd';\r\n\r\nimport { IndexPage }  from '../pages/Index/IndexPage'\r\nimport { Pokemon } from \"../pages/Pokemon/Pokemon\";\r\nimport { HeaderApp } from '../components/layout/HeaderApp'\r\nimport { History } from \"../pages/Pokemon/History\";\r\nimport NotFound from \"../pages/resultPage/NotFound\";\r\n\r\nimport {\r\n    BrowserRouter,\r\n    Switch,\r\n    Route,\r\n} from \"react-router-dom\";\r\nconst { Content } = Layout;\r\n\r\n\r\nexport default class RouterJS extends Component {\r\n    state = {\r\n\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <BrowserRouter>\r\n                <Layout className=\"layout\">\r\n                    <Affix offsetTop={0}>\r\n                        <HeaderApp history={this.props.history}/>\r\n                    </Affix>\r\n                    <Content className=\"min-height-100vh\">\r\n                        <Switch>\r\n                            <Route path=\"/Pokedex/?page=:page&limit=:limit\"  component={IndexPage}/>\r\n                            <Route path=\"/Pokedex/pokemon/:name\"  component={Pokemon}/>\r\n                            <Route path=\"/Pokedex/history\"  component={History}/>\r\n                            <Route path=\"/Pokedex/page=:page\"  component={IndexPage}/>\r\n                            <Route path=\"/Pokedex/\"  component={IndexPage}/>\r\n                            <Route  component={NotFound}/>\r\n                        </Switch>\r\n                    </Content>\r\n                    {/* <Footer></Footer> */}\r\n                </Layout>\r\n            </BrowserRouter>\r\n        )}\r\n    }\r\n\r\n","import { createStore, compose, applyMiddleware } from 'redux';\r\nimport thunkMiddleware from 'redux-thunk';\r\n\r\nconst HISTORY_LENGTH = 10\r\nconst initialState = {\r\n    favorite: localStorage.getItem('favorite'),\r\n    count: localStorage.getItem('count'),\r\n    historyPokemon: JSON.parse(localStorage.getItem(\"historyPokemon\")),\r\n};\r\n\r\nfunction reducer(state = initialState, action) {\r\n    switch (action.type){\r\n        case 'SET_FAVORITE':\r\n            localStorage.setItem('favorite', action.favorite);\r\n            state = {\r\n                ...state,\r\n                favorite: action.favorite\r\n            }\r\n            break;\r\n        case 'REMOVE_FAVORITE':\r\n            localStorage.removeItem('favorite');\r\n            state = {\r\n                ...state,\r\n                favorite: null\r\n            }\r\n            break;\r\n        case 'SET_COUNT_POKEMON':\r\n            localStorage.setItem('count', action.count);\r\n            state = {\r\n                ...state,\r\n                count: action.count\r\n            }\r\n            break;\r\n        case 'ADD_POKEMON_TO_HISTORY':\r\n            const newPokemon = action.pokemon\r\n            const allHistoryPokemon = JSON.parse(localStorage.getItem(\"historyPokemon\"));\r\n\r\n            if(allHistoryPokemon) {\r\n                if(!allHistoryPokemon.includes(newPokemon)){ /// перевіряє чи пакемон є у історії\r\n                    if(allHistoryPokemon.length < HISTORY_LENGTH) { // перевіряєм кількість пакемонив у історії\r\n                        // Якщо менша то потрібно просто додати пакемона\r\n                        let pokemonNow = allHistoryPokemon\r\n                        pokemonNow.push(newPokemon)\r\n                        localStorage.setItem(\"historyPokemon\", JSON.stringify(pokemonNow));\r\n                        state = {\r\n                            ...state,\r\n                            historyPokemon: pokemonNow\r\n                        }\r\n                    }else{ // у іншому випадку останнього пакемона потрібно видалити\r\n                        let newArrHistory = []\r\n                        for(let index = 1; index < HISTORY_LENGTH; index++){\r\n                            newArrHistory.push(allHistoryPokemon[index])\r\n                        }\r\n                        newArrHistory.push(newPokemon)\r\n                        localStorage.setItem(\"historyPokemon\", JSON.stringify(newArrHistory));\r\n                        state = {\r\n                            ...state,\r\n                            historyPokemon: newArrHistory\r\n                        }\r\n                    }\r\n                }\r\n            }else{ /// null\r\n                let newArrHistory = [newPokemon]\r\n                localStorage.setItem(\"historyPokemon\", JSON.stringify(newArrHistory));\r\n            }\r\n            break;\r\n        default:\r\n            return state\r\n    }\r\n\r\n    return state;\r\n}\r\n\r\nconst composeEnhancers = window.REDUX_DEVTOOLS_EXTENSION_COMPOSE || compose;\r\n\r\nexport const store = createStore(\r\n    reducer,\r\n    composeEnhancers(applyMiddleware(thunkMiddleware)),\r\n);\r\n\r\n","import RouterJS from './router/router'\nimport 'antd/dist/antd.css';\nimport './common/scss/app.scss'\nimport { Provider } from 'react-redux'\nimport { store } from \"./store/Store\";\n\nfunction App() {\n  return (\n      <Provider store={store}>\n        <RouterJS/>\n      </Provider>\n  );\n}\n\nexport default App;\n ","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n    <App />,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}